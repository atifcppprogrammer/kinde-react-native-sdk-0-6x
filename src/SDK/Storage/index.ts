/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import jwtDecode from 'jwt-decode';
import {
    AccessTokenDecoded,
    IdTokenDecoded,
    TokenResponse
} from '../../types/KindeSDK';
import { TokenType } from '../Enums/TokenType.enum';
import BaseStore from './Base';
import Constants, { ExecutionEnvironment } from 'expo-constants';

/**
 * The Storage SDK module.
 * @module SDK/Storage
 * @version 1.1.0
 */

class Storage extends BaseStore {
    constructor() {
        super();
    }

    async getStorage() {
        const isExpoGo =
            Constants.executionEnvironment === ExecutionEnvironment.StoreClient;

        if (isExpoGo) {
            const builder = await import('./ExpoStorage');
            return new builder.default();
        }
        const builder = await import('./RNStorage');
        return new builder.default();
    }

    async getToken(): Promise<TokenResponse | null> {
        const storage = await this.getStorage();
        const cred = await storage.getItem();
        if (typeof cred === 'object') {
            // RNStorage (KeyChain)
            return cred
                ? JSON.parse((cred as { password: string }).password)
                : null;
        }
        // Expo Secure Store
        return cred ? JSON.parse(cred as string) : null;
    }

    async setToken(token: string) {
        const storage = await this.getStorage();
        return storage.setItem(token);
    }

    async getTokenType(type: TokenType) {
        const token = await this.getToken();
        const newType =
            type === TokenType.ID_TOKEN ? type : TokenType.ACCESS_TOKEN;
        return token?.[newType] ?? null;
    }

    async getAccessToken() {
        return this.getTokenType(TokenType.ACCESS_TOKEN);
    }

    async getIdToken(): Promise<string | null> {
        return this.getTokenType(TokenType.ID_TOKEN);
    }

    async getExpiredAt() {
        const token = await this.getAccessToken();
        return token ? jwtDecode<AccessTokenDecoded>(token)['exp'] : 0;
    }

    getState() {
        return this.getItem('state');
    }

    setState(newState: string): void {
        return this.setItem('state', this.convertString(newState));
    }

    getCodeVerifier() {
        return this.getItem('codeVerifier');
    }

    setCodeVerifier(newCodeVerifier: string): void {
        return this.setItem(
            'codeVerifier',
            this.convertString(newCodeVerifier)
        );
    }

    getAuthStatus(): string | undefined {
        return this.getItem('authStatus');
    }

    setAuthStatus(newAuthStatus: string): void {
        return this.setItem('authStatus', this.convertString(newAuthStatus));
    }

    async clearAll() {
        this.clear();
        const storage = await this.getStorage();
        return storage.clear();
    }

    async getUserProfile() {
        const token = await this.getIdToken();
        const payload = (token ? jwtDecode(token) : {}) as IdTokenDecoded;
        return {
            id: payload['sub'] ?? '',
            given_name: payload['given_name'] ?? '',
            family_name: payload['family_name'] ?? '',
            email: payload['email'] ?? ''
        };
    }

    convertString(str: string | object): string {
        return typeof str === 'string' ? str : JSON.stringify(str);
    }
}

const sessionStorage = (globalThis.sessionStorage =
    globalThis.sessionStorage ?? new Storage()) as Storage;

export { Storage, sessionStorage };
