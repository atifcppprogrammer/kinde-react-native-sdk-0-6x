/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
 * The Oauth SDK module.
 * @module SDK/Oauth
 * @version 1.2.0
 */

import Url from 'url-parse';
import { AdditionalParameters, TokenResponse } from '../../types/KindeSDK';
import KindeSDK from '../KindeSDK';
import Storage from '../Storage';
import {
    OpenWebInApp,
    addAdditionalParameters,
    generateChallenge,
    generateRandomString
} from '../Utils';
import { AuthBrowserOptions } from '../../types/Auth';

class AuthorizationCode {
    /**
     * It opens the login page in the browser.
     * @param {KindeSDK} kindSDK - The KindeSDK instance
     * @param {boolean} [usePKCE=false] - boolean = false
     * @param {'login' | 'registration'} [startPage=login] - 'login' | 'registration' = 'login'
     * @param {AdditionalParameters} additionalParameters - AdditionalParameters = {}
     * @returns A promise that resolves when the URL is opened.
     */
    async authenticate(
        kindeSDK: KindeSDK,
        usePKCE: boolean = false,
        startPage: 'login' | 'registration' = 'login',
        additionalParameters: AdditionalParameters = {},
        options?: AuthBrowserOptions
    ): Promise<TokenResponse | null> {
        const URLParsed = Url(kindeSDK.authorizationEndpoint, true);
        const baseInfo = this.buildBaseAuthenticateURL(kindeSDK);

        Object.keys(baseInfo).forEach((k) => {
            URLParsed.query[k] = baseInfo[k];
        });

        URLParsed.query['start_page'] = startPage;

        const stateGenerated = generateRandomString();
        URLParsed.query['state'] = stateGenerated;
        addAdditionalParameters(URLParsed.query, additionalParameters);
        Storage.setState(stateGenerated);
        if (usePKCE) {
            const challenge = generateChallenge();
            URLParsed.query['code_challenge'] = challenge.codeChallenge;
            URLParsed.query['code_challenge_method'] = 'S256';
            Storage.setCodeVerifier(challenge.codeVerifier);
        }
        return OpenWebInApp(URLParsed.toString(), kindeSDK, options);
    }

    buildBaseAuthenticateURL(
        kindeSDK: KindeSDK
    ): Record<string, string | undefined> {
        return {
            client_id: kindeSDK.clientId,
            redirect_uri: kindeSDK.redirectUri,
            client_secret: kindeSDK.clientSecret,
            scope: kindeSDK.scope,
            grant_type: 'authorization_code',
            response_type: 'code'
        };
    }
}

export default AuthorizationCode;
