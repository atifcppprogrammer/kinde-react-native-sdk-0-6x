/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
 * The Oauth SDK module.
 * @module SDK/Oauth
 * @version 1.1.2
 */

import Url from 'url-parse';
import { AdditionalParameters, TokenResponse } from '../../types/KindeSDK';
import KindeSDK from '../KindeSDK';
import Storage from '../Storage';
import {
    OpenWebInApp,
    addAdditionalParameters,
    generateChallenge,
    generateRandomString
} from '../Utils';

class AuthorizationCode {
    /**
     * It opens the login page in the browser.
     * @param {KindeSDK} kindSDK - The KindeSDK instance
     * @param {boolean} [usePKCE=false] - boolean = false
     * @param {'login' | 'registration'} [startPage=login] - 'login' | 'registration' = 'login'
     * @param {AdditionalParameters} additionalParameters - AdditionalParameters = {}
     * @returns A promise that resolves when the URL is opened.
     */
    async authenticate(
        kindeSDK: KindeSDK,
        usePKCE: boolean = false,
        startPage: 'login' | 'registration' = 'login',
        additionalParameters: AdditionalParameters = {}
    ): Promise<TokenResponse | null> {
        const URLParsed = Url(kindeSDK.authorizationEndpoint, true);
        URLParsed.query['client_id'] = kindeSDK.clientId;
        URLParsed.query['redirect_uri'] = kindeSDK.redirectUri;
        URLParsed.query['client_secret'] = kindeSDK.clientSecret;
        URLParsed.query['grant_type'] = 'authorization_code';
        URLParsed.query['scope'] = kindeSDK.scope;
        URLParsed.query['start_page'] = startPage;
        URLParsed.query['response_type'] = 'code';

        const stateGenerated = generateRandomString();
        URLParsed.query['state'] = stateGenerated;
        addAdditionalParameters(URLParsed.query, additionalParameters);
        Storage.setState(stateGenerated);
        if (usePKCE) {
            const challenge = generateChallenge();
            URLParsed.query['code_challenge'] = challenge.codeChallenge;
            URLParsed.query['code_challenge_method'] = 'S256';
            Storage.setCodeVerifier(challenge.codeVerifier);
        }
        return OpenWebInApp(URLParsed.toString(), kindeSDK);
    }
}

export default AuthorizationCode;
